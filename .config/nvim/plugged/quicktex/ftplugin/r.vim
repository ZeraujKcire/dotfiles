let g:quicktex_r = {
      \' '   : "\<ESC>:call search('<++>')\<CR>\"_c/+>/e\<CR>",
			\'>' : "%>% ",
      \'adj' : "summary(<+++>)$adj.r.square",
			\'ae' : "aes(<+++>) <++>",
      \'an' : "anova(<+++>)",
      \'ano' : "anova(<+++>)",
			\'ao' : "aov(<+++> ~ <++> , data = <++>)",
			\'at' : "attach(<+++>)",
      \'box' : "boxcox(<+++>)",
			\'boxp' : "ggplot(<+++>, aes(x = <++> ,y = <++>)) + geom_boxplot()",
			\'bar' : "bartlett.test(<+++> ~ <++> , data = <++>)",
      \'bp' : "bptest(<+++>)",
      \'coef' : "summary(<+++>)$coef",
			\'caj' : "ggplot(<+++> , aes(x = <++> , y = <++>)) + geom_boxplot()",
      \'col' : "colnames(<+++>) = c(\"<++>\", \"<++>\")",
      \'cor' : "cor.test(x = <+++>,y = <++>, conf.level = 0.<++>)",
			\'dat' : "data.frame(<+++>)",
      \'dw' : "dwtest(<+++>)",
			\'dun' : "DunnettTest(<+++>, control = \"<++>\")",
      \'f' : "FALSE ",
      \'F' : "FALSE ",
			\'fac' : "factor(<+++>) <++>",
			\'fit' : "fitted(<+++>) <++>",
			\'fil' : "filter(<+++>)",
      \'fun' : " = function(<+++>) {\<CR><++>\n}",
      \'fst' : "summary(<+++>)$fstatistic",
      \'dim' : "dim(<+++>)[1]",
      \'dum' : "fastDummies::dummy_cols(<+++>, select_columns = \"<++>\")",
      \'for' : "for(i in <+++>:<++>) <++>",
      \'gg' : "ggplot(data = NULL, aes(x = <+++>,y = <++>)) + geom_point() + ggtitle(\"<++>\") + labs(x = \"<++>\",y = \"<++>\")  + geom_hline(yintercept = 0)",
      \'ggp' : "ggpairs(<+++>)",
			\'ggs' : "ggsave(\"IMAGENES/<+++>.png\")",
      \'gri' : "gird.arrange(<+++>,<++>,ncol = <++>,nrow = <++>)",
			\'ins' : "install.packages(\"<+++>\")",
      \'inf' : "influence.measures(<+++>)",
			\'jp' : "jpeg(\"IMAGENES/<+++>.jpeg\")",
      \'ks' : "ks.test(<+++>,\"pnorm\",0,<++>)",
      \'lib' : "suppressPackageStartupMessages(library(<+++>))",
			\'lev' : "leveneTest(<+++> ~ <++> , data = <++>)",
			\'lm' : "lm(<+++> ~ <++>,data = <++>)",
			\'lsd' : "LSD.test(<+++> , \"<++>\" , alpha = <++> , console = TRUE)",
			\'n' : "NULL ",
			\'N' : "NULL ",
			\'pn' : "png(\"IMAGENES/<+++>.png\")",
      \'pred' : "predict(<+++>,newdata = data.frame(<++> = <++>), interval = \"<++>\",level = 0.<++>)",
			\'pol' : "poly(<+++>, <++>, raw = TRUE)",
      \'re' : "read.table('<+++>.txt', header = <++>, stringsAsFactors = TRUE)",
      \'rec' : "read.csv('<+++>.csv', header = <++>, stringsAsFactors = TRUE, sep = '<++>')",
      \'ret' : "return(<+++>)",
      \'resi' : "residuals(<+++>)",
			\'ro' : "round(<+++>, <++>)",
      \'rst' : "rstudent(<+++>)",
      \'rsq' : "summary(<+++>)$r.square",
      \'sec' : "# === <+++> === (((\nsprintf(\" --- <++> --- \")\n<++>\n# )))",
      \'sec1' : "# === <+++> === (((\n<++>\n# )))",
      \'sh' : "shapiro.test(<+++>)",
      \'sha' : "shapiro.test(<+++>)",
      \'sp' : "sprintf(\"<+++>\")",
      \'sou' : "source(\"<+++>\")",
      \'sq' : "sqrt(<+++>)",
			\'st' : "str(<+++>)",
			\'su' : "sum(<+++>) <++>",
      \'sum' : "summary(<+++>)",
      \'t' : "TRUE ",
      \'T' : "TRUE ",
			\'tuk' : "TukeyHSD(<+++>)",
      \'vec' : "c(<+++>)",
      \'vif' : "vif(<+++>)",
      \}
